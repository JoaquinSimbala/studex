import { Component, OnInit, inject, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule, Router } from '@angular/router';
import { AuthService, User } from '../../services/auth.service';
import { ApiService } from '../../services/api.service';
import { FavoritesService } from '../../services/favorites.service';
import { Navbar } from '../../components/navbar/navbar';
import { ProjectCardComponent, ProjectCard } from '../../components/project-card/project-card';

// ========================================
// ‚ùå INTERFAZ NO UTILIZADA - Comentada para referencia futura
// ========================================
// Esta interfaz fue dise√±ada para filtros r√°pidos pero no se implement√≥ en el template
// Se mantiene comentada por si se decide implementar en el futuro
//
// interface QuickFilter {
//   id: string;
//   name: string;
//   type: string;
//   icon?: string;
// }

/**
 * Interfaz para categor√≠as desde la base de datos
 * 
 * @description
 * Define la estructura de las categor√≠as que se obtienen desde el backend.
 * Se utiliza para mostrar las categor√≠as populares en el hero section.
 */
interface CategoryDB {
  /** Identificador √∫nico de la categor√≠a */
  id: number;
  /** Nombre de la categor√≠a */
  nombre: string;
  /** Descripci√≥n opcional de la categor√≠a */
  descripcion?: string;
  /** Emoji o icono de la categor√≠a */
  icono?: string;
  /** Color hexadecimal de la categor√≠a */
  colorHex: string;
  /** Orden de visualizaci√≥n (menor = mayor prioridad) */
  ordenDisplay?: number;
}

/**
 * Componente principal de la p√°gina de inicio de STUDEX
 * 
 * @description
 * Gestiona la landing page de la plataforma, incluyendo:
 * - Hero section con b√∫squeda principal
 * - Categor√≠as populares desde la base de datos
 * - Grid de proyectos destacados
 * - Estad√≠sticas de la plataforma
 * - Footer con navegaci√≥n y redes sociales
 * 
 * El componente se integra con ProjectCardComponent para mostrar proyectos
 * de forma consistente con el resto de la aplicaci√≥n.
 * 
 * @example
 * ```html
 * <app-home></app-home>
 * ```
 */
@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule, Navbar, ProjectCardComponent],
  templateUrl: './home.html',
  styleUrl: './home.scss'
})
export class Home implements OnInit {

  /**
   * Referencia al componente Navbar para acceder a sus m√©todos p√∫blicos
   * 
   * @description
   * Permite llamar al m√©todo openCategoriesModal() del navbar desde el footer.
   * Se utiliza ViewChild para obtener acceso directo al componente hijo.
   */
  @ViewChild(Navbar) navbar!: Navbar;

  /**
   * Usuario actualmente autenticado en la plataforma
   * 
   * @description
   * Se obtiene mediante suscripci√≥n al observable currentUser$ de AuthService.
   * Null si el usuario no est√° autenticado.
   */
  currentUser: User | null = null;

  /**
   * Texto ingresado en la barra de b√∫squeda principal
   * 
   * @description
   * Se vincula con [(ngModel)] en el input de b√∫squeda del hero section.
   * Se env√≠a a la p√°gina /explorar al ejecutar onSearch().
   */
  searchQuery = '';

  /**
   * Array de proyectos destacados mostrados en la p√°gina principal
   * 
   * @description
   * Se cargan desde la API mediante loadFeaturedProjects().
   * Limitado a 6 proyectos destacados transformados a formato ProjectCard.
   */
  featuredProjects: ProjectCard[] = [];

  /**
   * Indica si se est√°n cargando los proyectos destacados
   * 
   * @description
   * Controla el spinner de carga en la secci√≥n de proyectos.
   * True durante la petici√≥n HTTP, false al completar o fallar.
   */
  isLoading = false;

  /**
   * Array de categor√≠as populares cargadas desde la base de datos
   * 
   * @description
   * Se muestra en el hero section, limitado a 5 categor√≠as.
   * Ordenadas por la propiedad ordenDisplay de la base de datos.
   */
  popularCategories: CategoryDB[] = [];

  /**
   * Indica si se est√°n cargando las categor√≠as desde la API
   * 
   * @description
   * Controla el spinner de carga en la secci√≥n de categor√≠as populares.
   */
  loadingCategories = false;

  /**
   * Servicio para gestionar proyectos favoritos del usuario
   * 
   * @description
   * Se inyecta usando inject() para sincronizar estados de favoritos
   * entre ProjectCardComponent y la p√°gina home.
   */
  private favoritesService = inject(FavoritesService);

  /**
   * Constructor del componente Home
   * 
   * @param authService - Servicio de autenticaci√≥n de usuarios
   * @param apiService - Servicio para realizar peticiones HTTP a la API
   * @param router - Router de Angular para navegaci√≥n entre p√°ginas
   */
  constructor(
    private authService: AuthService,
    private apiService: ApiService,
    private router: Router
  ) {}

  /**
   * Hook de ciclo de vida que se ejecuta al inicializar el componente
   * 
   * @description
   * Llama a initializeComponent() para cargar todos los datos necesarios.
   */
  ngOnInit(): void {
    this.initializeComponent();
  }

  /**
   * Inicializa el componente cargando datos necesarios de forma as√≠ncrona
   * 
   * @description
   * Realiza las siguientes operaciones en orden:
   * 1. Suscribe al usuario actual del AuthService
   * 2. Carga favoritos del usuario si est√° autenticado
   * 3. Carga categor√≠as populares y proyectos destacados en paralelo
   * 
   * @private
   * @async
   */
  private async initializeComponent(): Promise<void> {
    // Suscribirse al usuario actual
    this.authService.currentUser$.subscribe(user => {
      this.currentUser = user;
    });

    // Cargar favoritos primero para sincronizar estados
    if (this.authService.isAuthenticated()) {
      await this.favoritesService.loadFavorites().toPromise();
    }

    // Cargar categor√≠as populares y proyectos destacados
    await Promise.all([
      this.loadPopularCategories(),
      this.loadFeaturedProjects()
    ]);
  }

  /**
   * Carga las 5 categor√≠as m√°s populares desde la base de datos
   * 
   * @description
   * Las categor√≠as se ordenan por la propiedad ordenDisplay y se limitan a 5.
   * Si falla la petici√≥n a la API, se establece un array vac√≠o.
   * Controla el estado de carga mediante loadingCategories.
   * 
   * @private
   * @async
   */
  private async loadPopularCategories(): Promise<void> {
    this.loadingCategories = true;
    
    try {
      console.log('üîÑ Cargando categor√≠as populares desde API...');
      const response = await this.apiService.get('/projects/categories').toPromise();

      if (response?.success && response.data) {
        // Ordenar por ordenDisplay y tomar las primeras 5
        const allCategories = response.data as CategoryDB[];
        this.popularCategories = allCategories
          .sort((a, b) => (a.ordenDisplay || 999) - (b.ordenDisplay || 999))
          .slice(0, 5);
        
        console.log('‚úÖ Categor√≠as populares cargadas:', this.popularCategories.length);
        console.log('üìÇ Categor√≠as:', this.popularCategories);
      } else {
        console.warn('‚ö†Ô∏è No se pudieron cargar categor√≠as desde la API');
        this.popularCategories = [];
      }
    } catch (error) {
      console.error('‚ùå Error cargando categor√≠as populares:', error);
      this.popularCategories = [];
    } finally {
      this.loadingCategories = false;
    }
  }

  /**
   * Carga hasta 6 proyectos destacados desde la API
   * 
   * @description
   * Los proyectos se transforman usando transformProjectData() para adaptarlos
   * a la interfaz ProjectCard. Si falla la petici√≥n, se muestra un array vac√≠o.
   * No se utilizan datos mock, se prefiere mostrar estado vac√≠o.
   * 
   * @private
   * @async
   */
  private async loadFeaturedProjects(): Promise<void> {
    this.isLoading = true;
    
    try {
      console.log('üîÑ Cargando proyectos destacados desde API...');
      const response = await this.apiService.getFeaturedProjects(6).toPromise();

      console.log('üì° Respuesta de API:', response);

      if (response?.success && response.data) {
        this.featuredProjects = response.data.map((projectData: any) => this.transformProjectData(projectData));
        console.log('‚úÖ Proyectos destacados cargados desde BD:', this.featuredProjects.length);
        console.log('üìö Proyectos transformados:', this.featuredProjects);
      } else {
        console.warn('‚ö†Ô∏è No hay proyectos destacados disponibles en la BD');
        this.featuredProjects = [];
      }
    } catch (error) {
      console.error('‚ùå Error cargando proyectos destacados:', error);
      // No usar datos mock - dejar vac√≠o si falla la API
      this.featuredProjects = [];
      console.log('‚ö†Ô∏è No se pudieron cargar proyectos destacados de la BD');
    } finally {
      this.isLoading = false;
    }
  }

  /**
   * Funci√≥n trackBy para optimizar el renderizado de la lista de proyectos
   * 
   * @description
   * Angular usa esta funci√≥n para determinar qu√© elementos de la lista han cambiado,
   * mejorando el rendimiento al re-renderizar solo los elementos modificados.
   * 
   * @param index - √çndice del elemento en el array
   * @param project - Objeto del proyecto
   * @returns ID √∫nico del proyecto para tracking
   */
  trackByProjectId(index: number, project: ProjectCard): number {
    return project.id;
  }

  /**
   * Transforma datos del proyecto desde formato API a formato ProjectCard
   * 
   * @description
   * Realiza las siguientes transformaciones:
   * - Mapea campos de la BD a la interfaz ProjectCard
   * - Establece valores por defecto para campos opcionales
   * - Sincroniza el estado de favorito con FavoritesService
   * - Genera avatar del vendedor si no existe
   * 
   * @param projectData - Datos crudos del proyecto desde la API
   * @returns Proyecto transformado en formato ProjectCard
   * @private
   */
  private transformProjectData(projectData: any): ProjectCard {
    return {
      id: projectData.id,
      title: projectData.title,
      description: projectData.description,
      price: Number(projectData.price),
      type: projectData.type,
      university: projectData.university,
      category: projectData.category?.nombre || projectData.subject || 'General',
      year: projectData.year,
      rating: projectData.averageRating || 4.5,
      views: projectData.views || 0,
      mainImage: projectData.mainImage || (projectData.images?.[0] ? { fileUrl: projectData.images[0].fileUrl, fileName: projectData.images[0].fileName } : null),
      isFavorite: this.authService.isAuthenticated() ? this.favoritesService.isFavorite(projectData.id) : false, // Sincronizar con estado real de favoritos
      seller: {
        id: projectData.seller.id,
        name: projectData.seller.name || `${projectData.seller.nombre || ''} ${projectData.seller.apellidos || ''}`.trim(),
        avatar: projectData.seller.avatar || `https://ui-avatars.com/api/?name=${encodeURIComponent(projectData.seller.name || 'Usuario')}&background=007bff&color=ffffff&size=40`,
        rating: Number(projectData.seller.rating || projectData.seller.calificacionVendedor || 4.0),
        salesCount: projectData.seller.salesCount || projectData.seller.totalVentas || 0
      }
    };
  }

  /**
   * Ejecuta b√∫squeda navegando a /explorar con el t√©rmino ingresado
   * 
   * @description
   * Se activa al presionar Enter en el input de b√∫squeda o al hacer clic en el bot√≥n.
   * Solo navega si hay texto ingresado (excluyendo espacios vac√≠os).
   */
  onSearch(): void {
    if (this.searchQuery.trim()) {
      this.router.navigate(['/explorar'], { 
        queryParams: { q: this.searchQuery.trim() }
      });
    }
  }

  /**
   * Navega a /explorar con un t√©rmino de b√∫squeda predefinido
   * 
   * @description
   * Se usa para las b√∫squedas populares mostradas debajo de la barra principal.
   * 
   * @param searchTerm - T√©rmino de b√∫squeda predefinido
   * 
   * @example
   * ```typescript
   * onPopularSearch('Tesis de sistemas')
   * ```
   */
  onPopularSearch(searchTerm: string): void {
    this.router.navigate(['/explorar'], { 
      queryParams: { q: searchTerm }
    });
  }

  // ========================================
  // ‚ùå M√âTODO NO UTILIZADO - Comentado para referencia futura
  // ========================================
  // Este m√©todo fue dise√±ado para aplicar filtros r√°pidos pero no se usa en el template actual
  //
  // applyQuickFilter(filter: QuickFilter): void {
  //   this.router.navigate(['/explorar'], { 
  //     queryParams: { [filter.type]: filter.id }
  //   });
  // }

  /**
   * Navega a /explorar con una categor√≠a seleccionada como filtro
   * 
   * @description
   * Se activa al hacer clic en cualquiera de las categor√≠as populares del hero section.
   * 
   * @param category - Categor√≠a seleccionada
   * 
   * @example
   * ```typescript
   * selectPopularCategory({ id: 1, nombre: 'Software', colorHex: '#3B82F6' })
   * ```
   */
  selectPopularCategory(category: CategoryDB): void {
    this.router.navigate(['/explorar'], { 
      queryParams: { category: category.nombre }
    });
  }

  /**
   * Abre el modal de categor√≠as del navbar mediante ViewChild
   * 
   * @description
   * Este m√©todo se llama desde el footer cuando se hace clic en "Categor√≠as".
   * Usa ViewChild para acceder al componente Navbar y llamar a su m√©todo openCategoriesModal().
   * Si el navbar no est√° disponible, navega a /explorar como fallback.
   * 
   * @see Navbar.openCategoriesModal
   */
  openCategoriesModal(): void {
    if (this.navbar) {
      this.navbar.openCategoriesModal();
    } else {
      console.warn('‚ö†Ô∏è Navbar no est√° disponible, navegando a /explorar como fallback');
      this.router.navigate(['/explorar']);
    }
  }

  // ========================================
  // ‚úÖ M√âTODOS ELIMINADOS - Ya no son necesarios
  // ========================================
  // ProjectCardComponent ahora maneja toda la navegaci√≥n y favoritos internamente.
  // Estos m√©todos eran duplicados e innecesarios:
  //
  // viewProject(project: ProjectCard): void {
  //   if (this.currentUser && project.seller.id === parseInt(this.currentUser.id)) {
  //     this.router.navigate(['/vendedor/proyecto', project.id]);
  //   } else {
  //     this.router.navigate(['/proyecto', project.id]);
  //   }
  // }
  //
  // handleFavoriteClick(project: ProjectCard): void {
  //   if (!this.currentUser) {
  //     this.router.navigate(['/login']);
  //     return;
  //   }
  //   console.log('Favorito toggled para proyecto:', project.id);
  // }

  /**
   * Navega a la p√°gina de exploraci√≥n de todos los proyectos
   * 
   * @description
   * Se usa en m√∫ltiples lugares:
   * - Bot√≥n "Ver Todos los Proyectos" del encabezado de secci√≥n
   * - Estado vac√≠o cuando no hay proyectos destacados disponibles
   */
  viewAllProjects(): void {
    this.router.navigate(['/explorar']);
  }

  /**
   * Navega a /explorar para ver m√°s proyectos
   * 
   * @description
   * Se usa en el bot√≥n "Ver Todos los Proyectos" al final de la lista de destacados.
   * Actualmente solo navega a /explorar, no carga m√°s proyectos en la misma p√°gina.
   */
  loadMoreProjects(): void {
    this.router.navigate(['/explorar']);
  }

  // ========================================
  // ‚ùå M√âTODOS NO UTILIZADOS - Comentados para referencia futura
  // ========================================
  // ProjectCardComponent maneja internamente el formateo de tipos y errores de imagen
  // Estos m√©todos no se usan en el template actual de home
  //
  // getProjectTypeLabel(type: string): string {
  //   const typeLabels: { [key: string]: string } = {
  //     'SOFTWARE': 'Software',
  //     'INVESTIGACION': 'Investigaci√≥n',
  //     'PROYECTO_FINAL': 'Proyecto Final',
  //     'TEXTO_ARGUMENTATIVO': 'Ensayo',
  //     'PRESENTACION': 'Presentaci√≥n',
  //     'ANALISIS_CASO': 'An√°lisis de Caso',
  //     'OTRO': 'Otro'
  //   };
  //   return typeLabels[type] || type;
  // }
  //
  // onImageError(event: any): void {
  //   console.log('Error cargando imagen, usando placeholder');
  //   event.target.src = 'https://via.placeholder.com/400x300/e5e7eb/6b7280?text=Sin+Imagen';
  // }
}