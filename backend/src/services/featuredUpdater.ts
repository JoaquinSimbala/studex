import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * Actualiza autom√°ticamente los proyectos destacados
 * Selecciona los 6 proyectos PUBLICADOS m√°s recientes
 */
export async function updateFeaturedProjects(): Promise<void> {
  try {
    console.log('üîÑ Actualizando proyectos destacados autom√°ticamente...');

    // 1. Resetear todos los proyectos a no destacados
    await prisma.project.updateMany({
      data: {
        destacado: false
      }
    });

    // 2. Obtener los 6 proyectos publicados m√°s recientes
    const recentProjects = await prisma.project.findMany({
      where: {
        estado: 'PUBLICADO'
      },
      orderBy: {
        fechaCreacion: 'desc'  // Los m√°s recientes primero
      },
      take: 6
    });

    if (recentProjects.length > 0) {
      // 3. Marcar estos proyectos como destacados
      const projectIds = recentProjects.map(p => p.id);
      
      await prisma.project.updateMany({
        where: {
          id: {
            in: projectIds
          }
        },
        data: {
          destacado: true
        }
      });

      console.log(`‚úÖ ${recentProjects.length} proyectos marcados como destacados (m√°s recientes)`);
      recentProjects.forEach((project, index) => {
        console.log(`   ${index + 1}. ${project.titulo} (${project.fechaCreacion.toLocaleDateString()})`);
      });
    } else {
      console.log('‚ö†Ô∏è No se encontraron proyectos publicados');
    }

  } catch (error) {
    console.error('‚ùå Error actualizando proyectos destacados:', error);
  }
}

/**
 * Programa la actualizaci√≥n autom√°tica cada 30 minutos
 */
export function scheduleFeaturedUpdates(): void {
  // Ejecutar inmediatamente
  updateFeaturedProjects();
  
  // Programar ejecuci√≥n cada 30 minutos
  setInterval(() => {
    updateFeaturedProjects();
  }, 30 * 60 * 1000); // 30 minutos en milisegundos
  
  console.log('‚è∞ Programada actualizaci√≥n autom√°tica de proyectos destacados cada 30 minutos');
}